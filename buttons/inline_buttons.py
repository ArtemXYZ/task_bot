"""
    –ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —É–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫.
"""

from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫;
def get_callback_btns(*, btns: dict[str, str], sizes: tuple[int, ...] = (2,)):
    """
    sizes: –∫–æ—Ä—Ç–µ–∂ —Å —á–∏—Å–ª–∞–º–∏, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–º–∏ —Ä–∞–∑–º–µ—Ä—ã —Å—Ç—Ä–æ–∫.
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —ç—Ç–æ (2,), —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
    *,  # - –∑–∞–ø—Ä–µ—Ç –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É –Ω–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤

    –ú–µ—Ç–æ–¥ adjust –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ sizes –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏.
    –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Å—É–º–º—É –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ sizes, —Ç–æ:

    –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä repeat=True, —Ç–æ —Ä–∞–∑–º–µ—Ä—ã –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ –±—É–¥—É—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –¥–æ —Ç–µ—Ö –ø–æ—Ä,
    –ø–æ–∫–∞ –Ω–µ –±—É–¥—É—Ç —Ä–∞–∑–º–µ—â–µ–Ω—ã –≤—Å–µ –∫–Ω–æ–ø–∫–∏.
    –ï—Å–ª–∏ repeat=False (–∏–ª–∏ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ —É–∫–∞–∑–∞–Ω), —Ç–æ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å—Ç—Ä–æ–∫—É –ø–æ —Ä–∞–∑–º–µ—Ä—É
    –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ sizes.
    """

    keyboard = InlineKeyboardBuilder()

    for text, data in btns.items():
        # dict_items([('one', 1), ('two', 2), ('three', 3), ('four', 4)]) - –ø—Ä–∏–º–µ—Ä –≤–∏–¥–∞
        keyboard.add(InlineKeyboardButton(text=text, callback_data=data))

    return keyboard.adjust(*sizes).as_markup()


def get_callback_btns_from_tuple(*, btns: list[tuple[str, str]], sizes: tuple[int] = (1,)):
    """
    –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –≤ —Ñ—É–Ω–∫—Ü–∏—é = btns !
    *,  # - –∑–∞–ø—Ä–µ—Ç –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É –Ω–µ –∏–º–µ–Ω–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —ç—Ç–æ (1,), —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.

    –ï—Å–ª–∏ repeat —Ä–∞–≤–Ω–æ True, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è repeat_all –¥–ª—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤:
    [Button 1]
    [Button 2] [Button 3]
    [Button 4]
    –î–ª—è adjust(1, 2, repeat=True)

    –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è repeat_last –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–Ω–æ–ø–æ–∫.
    """
    keyboard = InlineKeyboardBuilder()

    # —Ü–∏–∫–ª for –±—É–¥–µ—Ç –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Å–ø–∏—Å–∫—É –∫–æ—Ä—Ç–µ–∂–µ–π –Ω–∞–ø—Ä—è–º—É—é:
    for key in btns:
        # –í —Å–ø–∏—Å–∫–µ –∫–æ—Ä—Ç–µ–∂–µ–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ 2—Ö, –ø–æ —ç—Ç–æ–º—É –æ–±—Ä–∞—â–∞–µ–º—Å—è –ø–æ –∏–Ω–¥–µ–∫—Å—É
        # –ù–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –∏–∑ –∑–∞–ø—Ä–æ—Å–∞: \
        # select(MultiLevelMenu.button_rank, MultiLevelMenu.button_text, MultiLevelMenu.callback_key, ... –¥—Ä—É–≥–∏–µ...
        text = key[1]  # = button_text
        data = key[2]  # = callback_key
        keyboard.add(InlineKeyboardButton(text=text, callback_data=data))

    # repeat (bool, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False): –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å—Ç—Ä–æ–∫,\
    # –µ—Å–ª–∏ –∫–Ω–æ–ø–æ–∫ –±–æ–ª—å—à–µ, —á–µ–º —Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—Ä–æ–≤ –≤ sizes.

    # adjust(–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É) , repeat=True
    return keyboard.adjust(*sizes).as_markup()


def get_callback_btns_db_end_optional_btns(*, btns: list[tuple[str, str]], optional_btns: list[tuple[str, str]] = None,
                                           sizes: tuple[int, ...] = (1,)):
    """
    –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –≤ —Ñ—É–Ω–∫—Ü–∏—é = btns  –∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –¥–æ–ø –∫–Ω–æ–ø–æ–∫ ('menu_back_3', '–ù–ê–ó–ê–î', 1)

    *,  # - –∑–∞–ø—Ä–µ—Ç –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É –Ω–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤

    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —ç—Ç–æ (1,), —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ (–æ–¥–Ω–∞–∫–æ, –Ω—É–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å –æ –Ω–∞–ª–∏—á–∏–∏ –¥–æ–ø. –∫–Ω–æ–ø–æ–∫.

    ! optional_btns - –º–µ—Ö–∞–Ω–∏–∑–º –≤–∫–ª—é—á–µ–Ω–∏—è –¥–æ–ø –∫–Ω–æ–ø–æ–∫ –≤ –≤—ã–±–æ—Ä–∫—É –∫–Ω–æ–ø–æ–∫ –∏–∑ –±–∞–∑—ã (btns) = –∏—Ö —Å—É–º–º–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    optional_btns –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∏–ø–∞ [('–ù–ê–ó–ê–î', 'menu_back_3')], —á—Ç–æ –±—ã –ª–µ–≥–∫–æ –ø—Ä–æ—Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å —Å btns (—Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π),
    –∞ —Ç–∞–∫ –∂–µ –ø–æ—Ä—è–¥–æ–∫ –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ( üö® button_text=key[1], –ø–æ—Ç–æ–º callback_key_data=key[2])

    –ï—Å–ª–∏ repeat —Ä–∞–≤–Ω–æ True, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è repeat_all –¥–ª—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤:
    [Button 1]
    [Button 2] [Button 3]
    [Button 4]
    –î–ª—è adjust(1, 2, repeat=True)

    –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è repeat_last –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–Ω–æ–ø–æ–∫.
    """

    keyboard = InlineKeyboardBuilder()

    if optional_btns is None:

        result_btns = btns


    else:

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±–∞ —Å–ø–∏—Å–∫–∞
        result_btns = btns + optional_btns  # sum_btns

    # —Ü–∏–∫–ª for –±—É–¥–µ—Ç –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Å–ø–∏—Å–∫—É –∫–æ—Ä—Ç–µ–∂–µ–π –Ω–∞–ø—Ä—è–º—É—é:
    for key in result_btns:
        # –í —Å–ø–∏—Å–∫–µ –∫–æ—Ä—Ç–µ–∂–µ–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ 2—Ö, –ø–æ —ç—Ç–æ–º—É –æ–±—Ä–∞—â–∞–µ–º—Å—è –ø–æ –∏–Ω–¥–µ–∫—Å—É
        # –ù–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –∏–∑ –∑–∞–ø—Ä–æ—Å–∞: \
        # select(MultiLevelMenu.button_rank, MultiLevelMenu.button_text, MultiLevelMenu.callback_key, ... –¥—Ä—É–≥–∏–µ...
        button_text = key[0]  #
        callback_key_data = key[1]  #
        keyboard.add(InlineKeyboardButton(text=button_text, callback_data=callback_key_data))

    # repeat (bool, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False): –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å—Ç—Ä–æ–∫,\
    # –µ—Å–ª–∏ –∫–Ω–æ–ø–æ–∫ –±–æ–ª—å—à–µ, —á–µ–º —Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—Ä–æ–≤ –≤ sizes.

    # adjust(–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É) , repeat=True
    return keyboard.adjust(*sizes).as_markup()


def construct_body_callback(callback_prefix: str | int, payload: str| int):
    """
        –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–µ–ª–±–µ–∫–æ–≤ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∫–µ–ª–±–µ–∫–∞ –∏–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π,
        –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –≤ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
        'callback_constructor'.
    """

    return f'{callback_prefix}{payload}'


def construct_inline_button(inline_keyboard_instance, callback_button_pack: tuple, payload: int | None = None):
    """
        –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä inline buttons
    """

    # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∫–æ—Ä—Ç–µ–∂–∞:
    _text, _callback = callback_button_pack

    # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä callback_data –∏–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –∏ –ø–æ–ª–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏:
    callback = construct_body_callback(_callback, payload if payload else '')

    inline_keyboard_instance.add(
        InlineKeyboardButton(
            text=_text,
            callback_data=callback
        )
    )


def create_catalog_buttons(task_catalog: list[dict], task_name: str, callback_prefix: str):
    """
        pass
    """

    inline_keyboard_instance: InlineKeyboardBuilder = InlineKeyboardBuilder()

    for itm in task_catalog:

        try:
            # -----------------------------------------
            task_id: int = itm['id']
            # -----------------------------------------
        except Exception as error:
            raise ValueError(
                f'‚õîÔ∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ –∏–Ω–¥–µ–∫—Å—É –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {error}')

        construct_inline_button(
            inline_keyboard_instance,
            callback_button_pack=(f'{task_name}_{task_id}', callback_prefix),
            payload=task_id
        )

    return inline_keyboard_instance.adjust(1).as_markup()
