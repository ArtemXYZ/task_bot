"""
    –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
"""
import datetime
from typing import List

# -------------------------------- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏
# from string import punctuation
# import traceback
# -------------------------------- –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from aiogram import Bot, types
from aiogram.types import Message, CallbackQuery

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, StateFilter, CommandObject, or_f

# -------------------------------- –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from filters.chats_filters import ChatTypeFilter
from states.states import *
from buttons.inline_buttons import *  # –ö–Ω–æ–ø–∫–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é - –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
from buttons.keyboard_buttons import *  # –ö–Ω–æ–ø–∫–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é - –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
from config.replicas import *

# –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —á–∞—Ä—Ç–æ–≤:
main_router = Router()


# ----------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# –ü—Ä–∏–µ–º –°–¢–ê–†–¢–ê / –ü—Ä–∏–º–µ—Ç —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç
# @main_router.message(or_f(CommandStart(), F.text == START))
@main_router.message(CommandStart())  # –û–±—Ä–∞–±–æ—Ç–∫–∞ /start
@main_router.message(F.text == START)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ "SHOW_TASKS"
async def start(message: Message, state: FSMContext, bot: Bot):
    """
        –°—Ç–∞—Ä—Ç –±–æ—Ç–∞, –≤—ã–≤–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.
    """

    tg_id = message.from_user.id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.
    await message.reply(
        text=f'üí¨ {WELCOME_TEXT}',
        reply_markup=get_keyboard(
            ADD_TASK,
            DELETE_TASK,
            SHOW_TASKS,
            START,
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",
            sizes=(1, 1, 1, 1)
        )
    )

    # -------------------- –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å —Å–ª—É–∂–µ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:
    print(f'–°—Ç–∞—Ä—Ç –±–æ—Ç–∞ tg_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: [{tg_id}]')


# ----------------------------------------------- SHOW_TASKS
@main_router.message(F.text == SHOW_TASKS)
async def show_tasks(message: Message, state: FSMContext, bot: Bot):
    """
        –û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É 'üîç –ü–û–ö–ê–ó–ê–¢–¨ –ó–ê–î–ê–ß–ò'.
    """

    # #  todo 3.1 –≤–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á :
    # 1. –°–¥–µ–ª–∞—Ç—å –æ—Ç—á–µ—Ç (–¥–µ–¥–ª–∞–π–Ω: 25.11.2024)
    # 2. –ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã (–¥–µ–¥–ª–∞–π–Ω: 20.11.2024)

    # –∑–∞–ø—Ä–æ—Å –∫ API
    pass
    #  todo 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç /show_tasks –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –æ—Ç API:
    # –ó–∞–ø—Ä–æ—Å –∫ API –Ω–∞ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:
    # tasks: dict = {}

    # task_list: list= [key, value  for tasks]

    task_list = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—à–∏–±–∫–∏:
    if task_list:

        await message.reply(
            text=f'üí¨ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n\n'
                 f'üîª {task_list if task_list else '–•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—É—Å—Ç–æ, –∑–∞–¥–∞—á–∏ –µ—â–µ –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.'}',
        )

    else:

        await message.reply(
            text=f'üí¨ –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n\n'
                 f'üîª {task_list }',
        )

# ----------------------------------------------- SHOW_TASKS

# ----------------------------------------------- DELETE_TASK
@main_router.message(F.text == DELETE_TASK)
async def start_delete_task(message: Message, state: FSMContext, bot: Bot):
    """
        –û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É '‚ûñ –£–î–ê–õ–ò–¢–¨ –ó–ê–î–ê–ß–£'.
    """

    try:
        #  –ó–∞–ø—Ä–æ—Å –∫ API –Ω–∞ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:
        task_catalog = []

        await message.reply(
            text=f'üí¨ –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å!',
            reply_markup=create_catalog_buttons(
                task_catalog,
                task_name='–ó–∞–¥–∞—á–∞ ',
                callback_prefix='del_task_'
            )
        )


    except Exception as error:
        print(
            f'‚õîÔ∏è –û—à–∏–±–∫–∞: {error}'
        )

        await message.reply(
            text=f'üí¨ –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n\n'
                 f'üîª {error}',
        )


    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
    await state.set_state(Task.delete_task)


@main_router.callback_query(StateFilter(Task.delete_task), F.data.startswith('del_task_'))
async def delete_task(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    # –û—Ç–≤–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª–∏.
    await callback.answer()

    try:
        #  –ó–∞–ø—Ä–æ—Å –∫ API –Ω–∞ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:
        task_catalog = []

        await callback.reply(
            text=f'üí¨ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!'
        )

    except Exception as error:
        print(
            f'‚õîÔ∏è –û—à–∏–±–∫–∞: {error}'
        )

        await callback.reply(
            text=f'üí¨ –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n\n'
                 f'üîª {error}',
        )
# ----------------------------------------------- DELETE_TASK

# ----------------------------------------------- ADD_TASK
@main_router.message(F.text == ADD_TASK)
async def add_task(message: Message, state: FSMContext, bot: Bot):
    """
        –û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É '‚ûï –î–û–ë–ê–í–ò–¢–¨ –ó–ê–î–ê–ß–£'.
    """

    await message.reply(
        text=f'üí¨ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏!',
        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É:
        reply_markup=types.ReplyKeyboardRemove()  # –£–¥–∞–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        #
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
    await state.set_state(Task.task_data)


@main_router.message(StateFilter(Task.task_data))
async def set_task(message: Message, state: FSMContext, bot: Bot):
    """
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–≤—É—é –ó–ê–î–ê–ß–£. –û–∂–∏–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: Task.task_data.
    """

    task_message_text = message.text


    await message.reply(
        text=f'üí¨ –í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (–î–î.–ú–ú.–ì–ì–ì–ì)!',
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
    await state.set_state(Task.deadline)
    await state.update_data(task_message_text=task_message_text)


@main_router.message(StateFilter(Task.deadline))
async def set_deadline(message: Message, state: FSMContext, bot: Bot):
    """
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–≤—É—é –ó–ê–î–ê–ß–£. –û–∂–∏–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: Task.task_data.
    """

    deadline_message_text = message.text

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ:
    data_state_dict = await state.get_data()
    task_message_text = data_state_dict.get('task_message_text')

    payload = {
        'task': task_message_text,
        'deadline': deadline_message_text,
    }

    print(
        f'–ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö \n'
        f' {payload}'
    )

    # –ó–∞–ø—Ä–æ—Å –ø–æ—Å—Ç —á–µ—Ä–µ–∑ –∞–ø–∏.
    # todo –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.
    pass


    task_list = True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—à–∏–±–∫–∏:
    if task_list:

        await message.reply(
            text=f'üí¨ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n'
                 f'üîª –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n'
                 f' üîπ –ó–∞–¥–∞—á–∞:\n'
                 f' {task_message_text}\n'
                 f' üîπ –î–µ–¥–ª–∞–π–Ω:\n'
                 f' {deadline_message_text}\n',
            reply_markup=get_keyboard(
                ADD_TASK,
                DELETE_TASK,
                SHOW_TASKS,
                START,
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",
                sizes=(1, 1, 1, 1)
            )
        )

    else:

        await message.reply(
            text=f'üí¨ –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n\n'
                 f'üîª {task_list}',
        )

    await state.clear()

# ----------------------------------------------- ADD_TASK




