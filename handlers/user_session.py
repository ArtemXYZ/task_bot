"""
    –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
"""
import datetime
from typing import List

# -------------------------------- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏
import re
# -------------------------------- –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from aiogram import Bot, types
from aiogram.types import Message, CallbackQuery

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, StateFilter, CommandObject, or_f

# -------------------------------- –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏

from services.aiohttp_session import AiohttpAdapter
from states.states import *
from buttons.inline_buttons import *  # –ö–Ω–æ–ø–∫–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é - –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
from buttons.keyboard_buttons import *  # –ö–Ω–æ–ø–∫–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é - –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
from config.replicas import *

# –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —á–∞—Ä—Ç–æ–≤:
main_router = Router()
aiohttp_adapter = AiohttpAdapter()
HEADERS = {"Content-Type": "application/json"}
# ----------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# –ü—Ä–∏–µ–º –°–¢–ê–†–¢–ê / –ü—Ä–∏–º–µ—Ç —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç
# @main_router.message(or_f(CommandStart(), F.text == START))
@main_router.message(CommandStart())  # –û–±—Ä–∞–±–æ—Ç–∫–∞ /start
@main_router.message(F.text == START)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ "SHOW_TASKS"
async def start(message: Message, state: FSMContext, bot: Bot):
    """
        –°—Ç–∞—Ä—Ç –±–æ—Ç–∞, –≤—ã–≤–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.
    """

    tg_id = message.from_user.id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.
    await message.reply(
        text=f'üí¨ {WELCOME_TEXT}',
        reply_markup=get_keyboard(
            ADD_TASK,
            DELETE_TASK,
            SHOW_TASKS,
            START,
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",
            sizes=(1, 1, 1, 1)
        )
    )

    # -------------------- –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å —Å–ª—É–∂–µ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:
    print(f'–°—Ç–∞—Ä—Ç –±–æ—Ç–∞ tg_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: [{tg_id}]')


# ----------------------------------------------- SHOW_TASKS
@main_router.message((F.text == SHOW_TASKS) | (F.text == '/show_tasks'))
async def show_tasks(message: Message, state: FSMContext, bot: Bot):
    """
        –û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É 'üîç –ü–û–ö–ê–ó–ê–¢–¨ –ó–ê–î–ê–ß–ò'.
    """

    try:

        # –ó–∞–ø—Ä–æ—Å –∫ API –Ω–∞ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:
        task_catalog: dict = await aiohttp_adapter.get_async_response(
            url='http://localhost:8000/api/tasks/list',
            headers=HEADERS
        )

        task_list = task_catalog.get('task_list')

        if not task_list:
            message_text = "üì≠ –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—É—Å—Ç–æ, –∑–∞–¥–∞—á–∏ –µ—â–µ –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã."
        else:
            tasks_text = "\n".join(
                f"{i+1}. {task['task']} (–¥–æ {task['deadline']})"
                for i, task in enumerate(task_list)
            )
            message_text = f"üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n\nüîª  {tasks_text}"

        await message.reply(
            text=message_text,
            reply_markup=get_keyboard(
                ADD_TASK,
                DELETE_TASK,
                SHOW_TASKS,
                START,
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",
                sizes=(1, 1, 1, 1)
            )
        )

    except Exception as error:
        print(error)

        await message.reply(
            text=f'üí¨ –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n\n'
                 f'üîª {error}',
            reply_markup=get_keyboard(
                ADD_TASK,
                DELETE_TASK,
                SHOW_TASKS,
                START,
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",
                sizes=(1, 1, 1, 1)
            )

        )
# ----------------------------------------------- SHOW_TASKS

# ----------------------------------------------- DELETE_TASK
@main_router.message(F.text == DELETE_TASK)
async def start_delete_task(message: Message, state: FSMContext, bot: Bot):
    """
        –û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É '‚ûñ –£–î–ê–õ–ò–¢–¨ –ó–ê–î–ê–ß–£'.
    """

    try:
        #  –ó–∞–ø—Ä–æ—Å –∫ API –Ω–∞ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:
        task_catalog: dict = await aiohttp_adapter.get_async_response(
            url='http://localhost:8000/api/tasks/list',
            headers=HEADERS
        )

        task_list = task_catalog.get('task_list')

        if task_list:

            await message.reply(
                text=f'üí¨ –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å!',
                reply_markup=create_catalog_buttons(
                    task_catalog.get('task_list'),
                    task_name='–ó–∞–¥–∞—á–∞ ',
                    callback_prefix='del_task_'
                )
            )

        else:

            await message.reply(
                text='üì≠ –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—É—Å—Ç–æ, –∑–∞–¥–∞—á–∏ –µ—â–µ –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã, —É–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ!',
                reply_markup=get_keyboard(
                    ADD_TASK,
                    DELETE_TASK,
                    SHOW_TASKS,
                    START,
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",
                    sizes=(1, 1, 1, 1)
                )
            )

    except Exception as error:
        print(error)

        await message.reply(
            text=f'üí¨ –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n\n'
                 f'üîª {error}',
            reply_markup=get_keyboard(
                ADD_TASK,
                DELETE_TASK,
                SHOW_TASKS,
                START,
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",
                sizes=(1, 1, 1, 1)
            )
        )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
    await state.set_state(Task.delete_task)


@main_router.callback_query(StateFilter(Task.delete_task), F.data.startswith('del_task_'))
async def delete_task(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    # –û—Ç–≤–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª–∏.
    await callback.answer()

    # –ü–æ–ª—É—á–∏—Ç—å callback, –Ω–æ–º–µ—Ä –∞–π–¥–∏:
    # –ò—â–µ–º —á–∏—Å–ª–æ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
    match = re.search(r'\d+$', callback.data)
    task_id = match.group()

    try:

        response = await aiohttp_adapter.delete_async_response(
            url=f'http://localhost:8000/api/tasks/delete/{task_id}',
            headers=HEADERS
        )

        await callback.message.edit_text(
            text=f'üí¨ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!\n\nüîª –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {response}',
        )

    except Exception as error:
        print(
            f'‚õîÔ∏è –û—à–∏–±–∫–∞: {error}'
        )

        await callback.message.edit_text(
            text=f'üí¨ –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n\n'
                 f'üîª {error}',
        )
# ----------------------------------------------- DELETE_TASK

# ----------------------------------------------- ADD_TASK
@main_router.message(F.text == ADD_TASK)
async def add_task(message: Message, state: FSMContext, bot: Bot):
    """
        –û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É '‚ûï –î–û–ë–ê–í–ò–¢–¨ –ó–ê–î–ê–ß–£'.
    """

    await message.reply(
        text=f'üí¨ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏!',
        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É:
        reply_markup=types.ReplyKeyboardRemove()  # –£–¥–∞–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        #
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
    await state.set_state(Task.task_data)


@main_router.message(StateFilter(Task.task_data))
async def set_task(message: Message, state: FSMContext, bot: Bot):
    """
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–≤—É—é –ó–ê–î–ê–ß–£. –û–∂–∏–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: Task.task_data.
    """

    task_message_text = message.text


    await message.reply(
        text=f'üí¨ –í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (–î–î.–ú–ú.–ì–ì–ì–ì)!',
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
    await state.set_state(Task.deadline)
    await state.update_data(task_message_text=task_message_text)


@main_router.message(StateFilter(Task.deadline))
async def set_deadline(message: Message, state: FSMContext, bot: Bot):
    """
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–≤—É—é –ó–ê–î–ê–ß–£. –û–∂–∏–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: Task.task_data.
    """

    # response: None | dict = None

    deadline_message_text = message.text

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ:
    data_state_dict = await state.get_data()
    task_message_text = data_state_dict.get('task_message_text')

    payload = {
        'task': task_message_text,
        'deadline': deadline_message_text,
    }
    # ------------------------- 1 / –û—à–∏–±–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:
    try:
        # –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–ø—Ä–∏—à–ª–µ—Ç –æ—Ç–≤–µ—Ç):
        response = await aiohttp_adapter.post_async_response(
            url='http://localhost:8000/api/tasks/add',
            json=payload,
            headers=HEADERS
        )

        # ------------------------- –ü—Ä–∏ —É—Å–ø–µ—Ö–µ:
        id_task = response.get('id')

        await message.reply(
            text=f'üí¨ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n'
                 f'üîª –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n'
                 f' üîπ Id: [{id_task}]\n'
                 f' üîπ –ó–∞–¥–∞—á–∞:\n'
                 f' [{task_message_text}]\n'
                 f' üîπ –î–µ–¥–ª–∞–π–Ω:\n'
                 f' [{deadline_message_text}]\n',
            reply_markup=get_keyboard(
                ADD_TASK,
                DELETE_TASK,
                SHOW_TASKS,
                START,
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",
                sizes=(1, 1, 1, 1)
            )
        )

    except Exception as error:

        print(error)
        await message.reply(
            text=f'üí¨ –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n\n'
                 f'üîª {error}',
            reply_markup=get_keyboard(
                ADD_TASK,
                DELETE_TASK,
                SHOW_TASKS,
                START,
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",
                sizes=(1, 1, 1, 1)
            )
        )

    await state.clear()
# ----------------------------------------------- ADD_TASK




#
# # ------------------------- 2 / –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:
# if response:
#
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—à–∏–±–∫–∏:
#     detail = response.get('detail')
#
#     if detail:
#         print(
#             f'‚õîÔ∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n\n'
#             f'üîª  {detail}'
#         )
#
#         await message.reply(
#             text=f'‚õîÔ∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n\n'
#                  f'üîª  {detail}',
#             reply_markup=get_keyboard(
#                 ADD_TASK,
#                 DELETE_TASK,
#                 SHOW_TASKS,
#                 START,
#                 placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",
#                 sizes=(1, 1, 1, 1)
#             )
#         )
#
# else: